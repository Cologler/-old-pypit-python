# -*- coding: utf-8 -*-
#
# Copyright (c) 2017~2999 - cologler <skyoflw@gmail.com>
# ----------
#
# ----------

# all docs was copy from
# https://setuptools.readthedocs.io/en/latest/setuptools.html#new-and-changed-setup-keywords


def setup_key(*args):
    raise NotImplementedError

def key(*args):
    raise NotImplementedError

def declare(name: str, docs, *, vars :list=None, **kwargs):
    raise NotImplementedError

def doc(*lines):
    return ' '.join(lines)


VARS = {
    True: None,
    False: None
}

# pylint: disable=C0103

# pylint: enable=C0103

# pylint: disable=C0301

declare(
    'include_package_data',
    doc('If set to {}, this tells {} to automatically include any data files it finds inside your package directories that are specified by your {} file.'),
    vars=[True, 'setuptools', 'MANIFEST.in'],
)

declare(
    'exclude_package_data',
    doc('A dictionary mapping package names to lists of glob patterns that should be excluded from your package directories.',
        'You can use this to trim back any excess files included by {}.'),
    vars=['include_package_data']
)

declare(
    'package_data',
    doc('A dictionary mapping package names to lists of glob patterns.',
        'For a complete description and examples, see the section below on Including Data Files.',
        'You do not need to use this option if you are using {},',
        'unless you need to add e.g. files that are generated by your setup script and build process.',
        '(And are therefore not in source control or are files that you don’t want to include in your source distribution.'),
    vars=['include_package_data']
)

declare(
    'zip_safe',
    doc('A boolean ({} or {}) flag specifying whether the project can be safely installed and run from a zip file.',
        'If this argument is not supplied, the {} command will have to analyze all of your project’s contents for possible problems each time it builds an egg.'),
    vars=[True, False, 'bdist_egg ']
)

declare(
    'install_requires',
    doc('A string or list of strings specifying what other distributions need to be installed when this one is.')
)

declare(
    'entry_points',
    doc('A dictionary mapping entry point group names to strings or lists of strings defining the entry points.',
        'Entry points are used to support dynamic discovery of services or plugins provided by a project.',
        'See Dynamic Discovery of Services and Plugins for details and examples of the format of this argument.',
        'In addition, this keyword is used to support Automatic Script Creation.')
)

declare(
    'extras_require',
    doc('A dictionary mapping names of “extras” (optional features of your project) to strings or lists of strings specifying what other distributions must be installed to support those features.'),
)

declare(
    'python_requires',
    doc('A string corresponding to a version specifier (as defined in PEP 440) for the Python version,',
        'used to specify the Requires-Python defined in PEP 345.')
)

declare(
    'setup_requires',
    doc('A string or list of strings specifying what other distributions need to be present in order for the setup script to run.',
        '{} will attempt to obtain these (even going so far as to download them using {}) before processing the rest of the setup script or commands.',
        'This argument is needed if you are using distutils extensions as part of your build process;',
        'for example, extensions that process setup() arguments and turn them into EGG-INFO metadata files.'),
    vars=['setuptools', 'EasyInstall']
)

declare(
    'dependency_links',
    doc('A list of strings naming URLs to be searched when satisfying dependencies.',
        'These links will be used if needed to install packages specified by {} or {}.',
        'They will also be written into the egg’s metadata for use by tools like {} to use when installing an {} file.'),
    vars=['setup_requires', 'tests_require', 'EasyInstall', '.egg']
)

declare(
    'namespace_packages',
    doc('A list of strings naming the project’s “namespace packages”.',
        'A namespace package is a package that may be split across multiple project distributions.',
        'For example, Zope 3’s {} package is a namespace package, because subpackages like {} and {} may be distributed separately.',
        'The egg runtime system can automatically merge such subpackages into a single parent package at runtime,',
        'as long as you declare them in each project that contains any subpackages of the namespace package,',
        'and as long as the namespace package’s {} does not contain any code other than a namespace declaration.'),
    vars=['zope', 'zope.interface', 'zope.publisher', '__init__.py']
)

declare(
    'test_suite',
    doc('A string naming a {} subclass (or a package or module containing one or more of them, or a method of such a subclass),',
        'or naming a function that can be called with no arguments and returns a {}.',
        'If the named suite is a module, and the module has an {} function,',
        'it is called and the results are added to the tests to be run.',
        'If the named suite is a package, any submodules and subpackages are recursively added to the overall test suite.'),
    vars=['unittest.TestCase', 'unittest.TestSuite', 'additional_tests()']
)

declare(
    'tests_require',
    doc('If your project’s tests need one or more additional packages besides those needed to install it,',
        'you can use this option to specify them.',
        'It should be a string or list of strings specifying what other distributions need to be present for the package’s tests to run.',
        'When you run the {} command, {} will attempt to obtain these (even going so far as to download them using {}).',
        'Note that these required projects will not be installed on the system where the tests are run,',
        'but only downloaded to the project’s setup directory if they’re not already installed locally.'),
    vars=['test', 'setuptools', 'EasyInstall']
)

declare(
    'test_loader',
    doc('If you would like to use a different way of finding tests to run than what setuptools normally uses,',
        'you can specify a module name and class name in this argument.',
        'The named class must be instantiable with no arguments,',
        'and its instances must support the {} method as defined in the Python {} module’s {} class.',
        'Setuptools will pass only one test “name” in the names argument: the value supplied for the {} argument.',
        'The loader you specify may interpret this string in any way it likes,',
        'as there are no restrictions on what may be contained in a {} string.'),
    vars=['loadTestsFromNames()', 'unittest', 'TestLoader', 'test_suite', 'test_suite']
)

declare(
    'eager_resources',
    doc('A list of strings naming resources that should be extracted together,',
        ' if any of them is needed, or if any C extensions included in the project are imported.',
        ' This argument is only useful if the project will be installed as a zipfile,',
        ' and there is a need to have all of the listed resources be extracted to the filesystem as a unit.',
        ' Resources listed here should be ‘/’-separated paths, relative to the source root,',
        ' so to list a resource {} in package {}, you would include the string {} in this argument.'),
    vars=['foo.png', 'bar.baz', 'bar/baz/foo.png']
)

declare(
    'use_2to3',
    doc('Convert the source code from Python 2 to Python 3 with 2to3 during the build process.')
)

declare(
    'convert_2to3_doctests',
    doc('List of doctest source files that need to be converted with 2to3.')
)

declare(
    'use_2to3_fixers',
    doc('A list of modules to search for additional fixers to be used during the 2to3 conversion.')
)

declare(
    'project_urls',
    doc('An arbitrary map of URL names to hyperlinks,',
        'allowing more extensible documentation of where various resources can be found than the simple {} and {} options provide.'),
    vars=['url', 'download_url']
)
